-- CLEANING LANDUSE COLUMN
SELECT DISTINCT LandUse
	FROM NASHVILLE_HOUSING


	SELECT DISTINCT LandUse
	FROM NASHVILLE_HOUSING
	WHERE LandUse LIKE '%VACAN%'

	UPDATE NASHVILLE_HOUSING
	SET LandUse = CASE 
					WHEN LandUse IN ('VACANT RES LAND','VACANT RESIENTIAL LAND') THEN 'VACANT RESIDENTIAL LAND' 
					ELSE LandUse
					END
	FROM NASHVILLE_HOUSING

-- FOR CLEANING SALEDATE

SELECT * 
FROM MSSQLTutortial.DBO.NASHVILLE_HOUSING
ORDER BY ParcelID

SELECT NEW_SALEDATE, CONVERT(DATE, SaleDate) AS NEW_SALEDATE
FROM MSSQLTutortial.DBO.NASHVILLE_HOUSING

UPDATE NASHVILLE_HOUSING
SET SaleDate = CONVERT(DATE, SaleDate) 

-- OR

ALTER TABLE NASHVILLE_HOUSING
ADD NEW_SALEDATE DATE

UPDATE NASHVILLE_HOUSING
SET NEW_SALEDATE = CONVERT(DATE, SaleDate) 


--REMOVING NULL FROM PROPERTY_ADDRESS
SELECT *
FROM NASHVILLE_HOUSING
--WHERE PropertyAddress IS NULL
ORDER BY ParcelID

SELECT NASHA.ParcelID,NASHA.PropertyAddress, NASHB.ParcelID, NASHB.PropertyAddress, ISNULL(NASHB.PropertyAddress,NASHA.PropertyAddress)
FROM NASHVILLE_HOUSING NASHA
JOIN NASHVILLE_HOUSING NASHB
ON NASHA.ParcelID = NASHB.ParcelID AND NASHA.[UniqueID ] <> NASHB.[UniqueID ]
WHERE NASHB.PropertyAddress IS NULL

UPDATE NASHB
SET NASHB.PropertyAddress = ISNULL(NASHB.PropertyAddress,NASHA.PropertyAddress)
FROM NASHVILLE_HOUSING NASHA
JOIN NASHVILLE_HOUSING NASHB
ON NASHA.ParcelID = NASHB.ParcelID AND NASHA.[UniqueID ] <> NASHB.[UniqueID ]
WHERE NASHB.PropertyAddress IS NULL

--BREAKING PROPERTY_ADRESS 

SELECT PropertyAddress, SUBSTRING(PropertyAddress,1,CHARINDEX(',',PropertyAddress)-1)
FROM NASHVILLE_HOUSING

SELECT PropertyAddress, SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress)+1, LEN(PropertyAddress) - CHARINDEX(',',PropertyAddress))
FROM NASHVILLE_HOUSING

ALTER TABLE NASHVILLE_HOUSING
ADD	Property_Address nvarchar(252)

UPDATE NASHVILLE_HOUSING
SET Property_Address = SUBSTRING(PropertyAddress,1,CHARINDEX(',',PropertyAddress)-1)
FROM NASHVILLE_HOUSING

ALTER TABLE NASHVILLE_HOUSING
ADD	Property_Address_City nvarchar(252)

UPDATE NASHVILLE_HOUSING
SET Property_Address_City = SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress)+1, LEN(PropertyAddress) - CHARINDEX(',',PropertyAddress))
FROM NASHVILLE_HOUSING

SELECT OwnerAddress
--,SUBSTRING(OwnerAddress, 1,CHARINDEX(',',OwnerAddress)-1)
FROM NASHVILLE_HOUSING

ALTER TABLE NASHVILLE_HOUSING
ADD OWNER_ADDRESS NVARCHAR(252)

UPDATE NASHVILLE_HOUSING
SET OWNER_ADDRESS =  SUBSTRING(OwnerAddress, 1,CHARINDEX(',',OwnerAddress)-1)
FROM NASHVILLE_HOUSING

SELECT OwnerAddress, SUBSTRING(OwnerAddress, CHARINDEX(',',OwnerAddress)+1, CHARINDEX(',',OwnerAddress,CHARINDEX(',',OwnerAddress)+1)- CHARINDEX(',',OwnerAddress)-1)
FROM NASHVILLE_HOUSING

ALTER TABLE NASHVILLE_HOUSING
ADD OWNER_ADDRESS_CITY NVARCHAR(252)

UPDATE NASHVILLE_HOUSING
SET OWNER_ADDRESS_CITY = SUBSTRING(OwnerAddress, CHARINDEX(',',OwnerAddress)+1, CHARINDEX(',',OwnerAddress,CHARINDEX(',',OwnerAddress)+1)- CHARINDEX(',',OwnerAddress)-1)
FROM NASHVILLE_HOUSING

SELECT OwnerAddress, SUBSTRING(OwnerAddress, CHARINDEX(',',OwnerAddress,CHARINDEX(',',OwnerAddress)+1)+1,LEN(OwnerAddress)-CHARINDEX(',',OwnerAddress,CHARINDEX(',',OwnerAddress)+1))
FROM NASHVILLE_HOUSING


ALTER TABLE NASHVILLE_HOUSING
ADD OWNER_ADDRESS_STATE NVARCHAR(252)

UPDATE NASHVILLE_HOUSING
SET OWNER_ADDRESS_STATE = SUBSTRING(OwnerAddress, CHARINDEX(',',OwnerAddress,CHARINDEX(',',OwnerAddress)+1)+1,LEN(OwnerAddress)-CHARINDEX(',',OwnerAddress,CHARINDEX(',',OwnerAddress)+1))
FROM NASHVILLE_HOUSING

-- CLEANING UP SOLDASVACANT COLUMN 

SELECT DISTINCT SoldAsVacant
FROM MSSQLTutortial.DBO.NASHVILLE_HOUSING

SELECT SoldAsVacant, CASE 
					 WHEN SoldAsVacant = 'Y' THEN 'Yes'
					 WHEN SoldAsVacant = 'N' THEN 'No'
					 ELSE SoldAsVacant 
					 END
FROM NASHVILLE_HOUSING

UPDATE NASHVILLE_HOUSING
SET SoldAsVacant = CASE 
					 WHEN SoldAsVacant = 'Y' THEN 'Yes'
					 WHEN SoldAsVacant = 'N' THEN 'No'
					 ELSE SoldAsVacant 
					 END
FROM NASHVILLE_HOUSING



-- REMOVING DUPLICATES

WITH CTE1 AS (
SELECT *, ROW_NUMBER() OVER (
							PARTITION BY ParcelID,
										 PropertyAddress,
										 SaleDate,
										 SalePrice,
										 LegalReference
							
							ORDER BY UniqueId) AS RANKS
FROM NASHVILLE_HOUSING)
DELETE
FROM CTE1
WHERE RANKS = 2 ;

--CREATING VIEW FOR DATA NEEDED FOR VISUALIZATION 


CREATE OR ALTER VIEW NASHVILLE_VISUAL AS
SELECT  [UniqueID ],
		ParcelID,
		LandUse,
		NEW_SALEDATE,
		SalePrice,
		SoldAsVacant,
		Acreage,
		LandValue,
		BuildingValue,
		TotalValue,
		YearBuilt,
		Bedrooms,
		FullBath,
		HalfBath
FROM NASHVILLE_HOUSING

-- to find the the bedroom number that is mostly sold across each sales year

SELECT Bedrooms,COUNT(Bedrooms) COUNT, LandUse, DATEPART (YEAR,NEW_SALEDATE) YEARLY_DATE
FROM NASHVILLE_HOUSING
GROUP BY Bedrooms, LandUse, DATEPART (YEAR,NEW_SALEDATE) 
HAVING LandUse = 'SINGLE FAMILY'
ORDER BY YEARLY_DATE DESC, Bedrooms ASC

-- type of land use that was sold the most
	SELECT  LandUse, COUNT(NEW_SALEDATE) COUNTS
	FROM NASHVILLE_VISUAL
	GROUP BY LandUse
	ORDER BY COUNTS DESC


-- RATIO OF HOUSES SOLD AS VACANT TO THAT NOT SOLD AS VACANT

WITH CTE2 AS (
SELECT DISTINCT SoldAsVacant ,COUNT(SoldAsVacant) OVER (PARTITION BY SoldAsVacant)AS COUNTS
FROM NASHVILLE_VISUAL
),

CTE3 AS (
SELECT SoldAsVacant, COUNTS, SUM(COUNTS) OVER () AS SUMM
FROM CTE2)

SELECT *,  CAST(COUNTS AS FLOAT) /SUMM *100 
FROM CTE3

-- GETTING VALUES FOR CREATING A SCATTER PLOT BETWEEN AVERAGE SALE PRICE AND AVERAGE TOTAL VALUE 
SELECT LandUse, AVG(SalePrice) AVERAGE_SALE_PRICE, ISNULL (CAST (AVG(TotalValue) AS nvarchar),'NOT ASSIGNED') AS AVERAGE_TOTAL_VALUE
FROM NASHVILLE_HOUSING
GROUP BY LandUse
HAVING ISNULL (CAST (AVG(TotalValue) AS nvarchar),'NOT ASSIGNED') <> 'NOT ASSIGNED'
ORDER BY AVERAGE_TOTAL_VALUE DESC

-- GETTING PERCENTAGE PROFIT  FOR EACH LAND USE
WITH CTE1 AS (
SELECT LandUse, 
AVG(SalePrice) AVERAGE_SALE_PRICE, 
ISNULL (CAST (AVG(TotalValue) AS nvarchar),'NOT ASSIGNED') AS AVERAGE_TOTAL_VALUE
FROM NASHVILLE_HOUSING
GROUP BY LandUse
HAVING ISNULL (CAST (AVG(TotalValue) AS nvarchar),'NOT ASSIGNED') <> 'NOT ASSIGNED'
)
SELECT * , 
AVERAGE_SALE_PRICE-AVERAGE_TOTAL_VALUE AS PROFIT, 
(AVERAGE_SALE_PRICE-AVERAGE_TOTAL_VALUE)/AVERAGE_TOTAL_VALUE *100 AS PERCENTAGE_PROFIT,
(AVERAGE_SALE_PRICE-AVERAGE_TOTAL_VALUE)/AVERAGE_TOTAL_VALUE
FROM CTE1
ORDER BY PERCENTAGE_PROFIT DESC